import User from '@/app/(models)/User';
import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';
import { NextResponse } from 'next/server';

const JWT_SECRET = process.env.JWT_SECRET || 'your_secret_key';

export async function POST(req) {
  const { email, password, action } = await req.json();

  if (action === 'login') {
    const user = await User.findOne({ email });

    if (!user) {
      return NextResponse.json({ message: 'User not found' }, { status: 404 });
    }

    const isMatch = await bcrypt.compare(password, user.password);

    if (!isMatch) {
      return NextResponse.json({ message: 'Invalid password' }, { status: 401 });
    }

    const token = jwt.sign({ userId: user._id, role: user.role }, JWT_SECRET, {
      expiresIn: '1h',
    });

    return NextResponse.json({ message: 'Login successful', token });
  }

  if (action === 'register') {
    const userExists = await User.findOne({ email });
    if (userExists) {
      return NextResponse.json({ message: 'Email already in use' }, { status: 400 });
    }

    const user = new User({ email, password });
    await user.save();

    return NextResponse.json({ message: 'User registered successfully' }, { status: 201 });
  }

  return NextResponse.json({ message: 'Invalid action' }, { status: 400 });
}
